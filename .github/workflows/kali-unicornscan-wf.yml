name: "unicornscan with kali CI workflow"


on:
  push:
    branches: [ test ]
  # schedule:
  #     - cron:  '0 0 1 * *' ##execution of a task in the first minute of the month  


jobs:

  unicornscan-1604-ubuntu-latest-job:
    name: "build unicornscan with ubuntu 16.04 on ubuntu latest"
    runs-on: ubuntu-latest
    env:
      distribution: "kalilinux" #https://hub.docker.com/r/ubuntu
      version: "latest"
      name: "kali/unicornscan"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.kali.unicornscan"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch                  
    - name: "build unicornscan with ubuntu 16.04 "
      run: |
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not usedi
        set -xe
        whoami
        echo ${USER} 
        #Add current logged in user to the docker group.
        sudo usermod -aG docker ${USER}
        id  ${USER}
        docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        docker image ls
        docker image history ${name}:${version} 
        docker system df -v               
        docker image inspect ${name}:${version}  
        echo "################## ENTRYPOINT ##################"
        docker inspect -f '{{.Config.Entrypoint}}' ${name}:${version}
        echo "################## ENTRYPOINT ##################"
        # the input device is not a TTY
        # docker run  -it --rm --net=host ${name}:${version} -h 
        # docker run ${name}:${version} unicornscan -h
        # docker run --rm --net=host ${name}:${version} unicornscan -h 
        docker run ${name}:${version} -h